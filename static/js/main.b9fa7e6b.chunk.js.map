{"version":3,"sources":["../../dist/index.es.js","App.tsx","index.tsx"],"names":["index_es","_a","points","bounds","zoom","options","superclusterRef","Object","react","_b","clusters","setClusters","current","node_modules_supercluster","load","getClusters","supercluster","styles","container","paddingTop","map","margin","width","height","boxShadow","cluster","lineHeight","backgroundColor","color","borderRadius","cursor","fontSize","PLACES","amount","arguments","length","undefined","i","push","type","properties","index","geometry","coordinates","Math","random","generateRandomPlaces","App","_React$useState","React","useState","center","ne","sw","_React$useState2","slicedToArray","mapState","setMapState","bbox","useMemo","_mapState$bounds","_useSupercluster","useSupercluster","log","react_default","a","createElement","style","lib_default","defaultWidth","defaultHeight","onBoundsChanged","_ref","Array","isArray","place","point","anchor","clusterId","cluster_id","pigeon_overlay_lib_react_default","key","offset","objectSpread","textAlign","onClick","_ref2","newZoom","getClusterExpansionZoom","onClickCluster","point_count","lib_react_default","payload","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b9fa7e6b.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from 'react';\nimport Supercluster from 'supercluster';\n\nvar useSupercluster = function useSupercluster(_a) {\n  var points = _a.points,\n      bounds = _a.bounds,\n      zoom = _a.zoom,\n      options = _a.options;\n  var superclusterRef = useRef();\n\n  var _b = useState([]),\n      clusters = _b[0],\n      setClusters = _b[1];\n\n  useEffect(function () {\n    if (!superclusterRef.current) {\n      superclusterRef.current = new Supercluster(options);\n    }\n\n    superclusterRef.current.load(points);\n\n    if (bounds && zoom) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoom));\n    }\n  }, [points]);\n  useEffect(function () {\n    if (superclusterRef.current && bounds && zoom) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoom));\n    }\n  }, [bounds, zoom]);\n  return {\n    clusters: clusters,\n    supercluster: superclusterRef.current\n  };\n};\n\nexport default useSupercluster;","import React from 'react';\nimport Map, { MapState, MapBoundsChangedEvent } from 'pigeon-maps';\nimport Marker from 'pigeon-marker';\nimport Overlay from 'pigeon-overlay';\n\nimport { ClusterProperties, AnyProps } from 'supercluster';\nimport useSupercluster from 'react-supercluster';\nimport { BBox, Feature, Point } from 'geojson';\n\nconst styles = {\n  container: {\n    paddingTop: '1rem',\n  },\n  map: {\n    margin: '0 auto',\n    width: 600,\n    height: 400,\n    boxShadow: '#cdcdcd 0px 1px 4px',\n  },\n  cluster: {\n    width: 20,\n    height: 20,\n    lineHeight: '20px',\n    backgroundColor: '#607d8b',\n    color: 'white',\n    borderRadius: 10,\n    cursor: 'pointer',\n    fontSize: 11,\n  },\n};\n\ninterface PointProperties {\n  index: number;\n}\n\nfunction isClusterFeature(point: Feature): point is Feature<Point, ClusterProperties & AnyProps> {\n  if (point && point.properties && point.properties.cluster) {\n    return true;\n  }\n  return false;\n}\n\nfunction generateRandomPlaces(amount: number = 500) {\n  const points: Feature<Point, PointProperties>[] = [];\n  for (let i = 0; i < amount; i++) {\n    points.push({\n      type: 'Feature',\n      properties: {\n        index: i,\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [-180 + 360 * Math.random(), -80 + 160 * Math.random()],\n      },\n    });\n  }\n  return points;\n}\n\nconst PLACES = generateRandomPlaces();\n\nconst App = () => {\n  const [mapState, setMapState] = React.useState<MapState>({\n    center: [-17.471730109760017, 14.732489324994077],\n    zoom: 2,\n    bounds: { ne: [-1, -1], sw: [-1, -1] },\n  });\n\n  const bbox = React.useMemo<BBox>(() => {\n    const { sw, ne } = mapState.bounds;\n    return [sw[0], sw[1], ne[0], ne[1]];\n  }, [mapState.bounds]);\n\n  const { clusters, supercluster } = useSupercluster({\n    points: PLACES,\n    bounds: bbox,\n    zoom: mapState.zoom,\n    options: {\n      log: true,\n    },\n  });\n\n  function handleBoundsChange({ center, zoom, bounds }: MapBoundsChangedEvent) {\n    setMapState({ center, zoom, bounds });\n  }\n\n  function onClickCluster({ anchor, clusterId }: any) {\n    if (!supercluster) {\n      return;\n    }\n    const newZoom = supercluster.getClusterExpansionZoom(clusterId);\n    setMapState(mapState => ({ ...mapState, center: anchor, zoom: newZoom }));\n  }\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.map}>\n        <Map\n          center={mapState.center}\n          zoom={mapState.zoom}\n          defaultWidth={styles.map.width}\n          defaultHeight={styles.map.height}\n          onBoundsChanged={handleBoundsChange}\n        >\n          {Array.isArray(clusters) &&\n            clusters.map((place, index) => {\n              const anchor = place.geometry.coordinates;\n              if (isClusterFeature(place)) {\n                const clusterId = place.properties.cluster_id;\n                return (\n                  <Overlay\n                    key={index}\n                    anchor={anchor}\n                    offset={[styles.cluster.height / 2, styles.cluster.width / 2]}\n                  >\n                    <div\n                      style={{ ...styles.cluster, textAlign: 'center' }}\n                      onClick={() => onClickCluster({ anchor, clusterId })}\n                    >\n                      {place.properties.point_count}\n                    </div>\n                  </Overlay>\n                );\n              }\n              return <Marker key={index} anchor={anchor} payload={1} />;\n            })}\n        </Map>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}